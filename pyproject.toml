[tool.poetry]
name = "cli_tool_audit"
version = "1.0.5"
description = "Audit for existance and vesion number of cli tools."
authors = ["Matthew Martin <matthewdeanmartin@gmail.com>"]
keywords = ["cli tooling", "version numbers", ]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
include = [
    "cli_tool_audit/**/*.py",
    "cli_tool_audit/**/*.md",
    "cli_tool_audit/**/*.txt",
    "cli_tool_audit/**/*.html",
    "cli_tool_audit/**/*.jinja",
    "cli_tool_audit/py.typed",
]
exclude = [
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/matthewdeanmartin/cli_tool_audit"
homepage = "https://github.com/matthewdeanmartin/cli_tool_audit"
documentation = "https://github.com/matthewdeanmartin/cli_tool_audit"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/matthewdeanmartin/cli_tool_audit/issues"
"Change Log" = "https://github.com/matthewdeanmartin/cli_tool_audit/blob/main/CHANGES.md"

[tool.poetry.scripts]
cli_tool_audit = 'cli_tool_audit.__main__:main'
tool_audit = 'cli_tool_audit.__main__:main'

[tool.poetry.dependencies]
python = ">=3.8"

# file finding
whichcraft = ">=0.6.1"

# version parsing
semver = ">=3.0.2"
packaging = ">=23.2"

# UI
prettytable = ">=3.9.0"
colorama = ">=0.4.6"
colorlog = ">=6.8.0"

# Config
toml = ">=0.10.2"
tomlkit = ">=0.12.3"

[tool.poetry.dev-dependencies]

# build tools
black = ">=23.11.0"
pytest = ">=7.4.3"
pytest-cov = ">=4.1.0"
pylint = ">=3.0.2"
ruff = ">=0.1.9"

# types
mypy = ">=1.8.0"
types-toml = "*"
types-colorama ="*"

# more testing
# pytest-snapshot = ">=0.9.0"
# pytest-asyncio = ">=0.23.2"
#anyio = ">=4.2.0"
#trio = ">=0.23.2"

pre-commit = ">=3.5.0"
scriv = ">=1.5.0"

# docs
interrogate = ">=1.5.0"
#pydoctest = ">=0.1.22"
pdoc3 = ">=0.10.0"
#
# contract
# griffe = ">=0.38.1"

tox="*"
[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''
[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "test",
    "tests"
]
junit_family = "xunit1"
norecursedirs = ["vendor", "scripts"]
# don't know how to do this in toml
#addopts = "--strict-markers"
#markers =
#	slow: marks tests as slow (deselect with '-m "not slow"')
#	fast: marks tests as fast (deselect with '-m "not fast"')

[tool.isort]
default_section = "THIRDPARTY"
force_grid_wrap = 0
include_trailing_comma = true
known_first_party = ["dedlin"]
line_length = 120
multi_line_output = 3
use_parentheses = true

[tool.ruff]
line-length = 1000

# Enable Pyflakes `E` and `F` codes by default.
select = ["E", "F",
    "D", # docs
    "UP", # pyupgrade
    "B", # bugbear
]
ignore = [
    "E722",
    # only track structural problems with docstrings, not whitespace, nor missing
    "D200", "D212", "D415", "D411", "D205", "D102", "D103", "D100", "D107", "D101", "D104", "D105",
    "UP007", "UP038", # Not sure if | is well supported in lowever versions of python
]

# Exclude a variety of commonly ignored directories.
exclude = [
    "dead_code",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = { }

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py311"


[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.scriv]
version = "literal: pyproject.toml: tool.poetry.version"
format = "md"
main_branches = "master, main, develop, dev"

[mypy]
warn_return_any = true
warn_unused_configs = true
strict = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
strict_optional = true
warn_redundant_casts = true
warn_no_return = true

mypy_path = [".", "$MYPY_CONFIG_FILE_DIR/typings", "typings"]
files = ["cli_tool_audit", "typings"]

[mypy.pygount]
ignore_missing_imports = true

[mypy.astor]
ignore_missing_imports = true


[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.cli-tools]
pipx = {  version = ">=1.0.0", version_switch = "--version" }
mypy = {  version = ">=1.0.0" }
pylint = {  version = ">=1.0.0" }
black = {  version = ">=1.0.0" }
pygount = { version = ">=1.6.0" }
ruff = {  version = "0.*" }
vulture = { version = "*" }

#cat = {  version = ">=8.32", version_switch = "--version" }
#bash = {  version = ">=5.2.12", version_switch = "--version" }
make = { version = ">=3.81" }
python = { version = ">=3.11.1" }
terraform = { version = ">=1.2.9" }
java = { version = ">=17.0.6" }
# demo of files that don't exist
doesnotexist = { version = ">=1.0.0" }
# Just check existence
notepad = { only_check_existence = true }
rustc = { version = ">=1.67.0" }
"yes.exe" = { version = ">=1.0.0" }
"yes" = { version = "~1.0.0" }
podman = { version = "^4.6.0" }
tesseract = { version = ">=5.1.0.20220510" }
pandoc = { version = ">=2.7.3" }
nano = { version = ">=7.1" }
shellcheck = { version = ">=0.8.0" }
choco = { version = ">=0.10.13" }
brew = { version = ">=0.0.0", if_os="darwin" }
poetry = {version_snapshot = "Poetry (version 1.5.1)"}


#[tool.cli-tools]
#foobar = {  version = ">=1.0.0"}
#foo = {  version = ">=1.0.0", version_switch = "version" }
#bar = {  version = ">=1.0.0", version_switch = "-v" }
#notepad = { only_check_existence = true }
#tesseract = { version = ">=5.1.0.20220510", schema="fourpart" }
#winver = { version = ">=1.0.0", if_os="win" }
#blerg = { version_stamp = "blerg v1-2 (Jan 2024) 64bit", if_os="win" }
#winapp = {version =">=1.2.3.4", schema="dotnet", if_os="win", source="registry"}
#winthing = {version =">=1.2.3", schema="semver", if_os="win", source="fileversioninfo"}


